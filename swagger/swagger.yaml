openapi: 3.0.0
info:
  title: Sample API
  description: Optional multiline or single-line description in HTML.
  version: 0.1.9
servers:
  - url: http://localhost:3000
    description: Optional server description, e.g. Main (production) server
#basePath: /api
paths:
  /api/profile/employee:
    post:
      summary: Crear nuevo empleador.
      description: Crear nuevo empleador.
      tags:
        - Profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#components/schemas/EmployeeRequest"
      responses:
        "200": # status code
          description: Model employee type
          content:
            application/json:
              schema:
                $ref: "#components/schemas/EmployeeRequest"
    get:
      summary: Get all workers
      description: Get all workers
      tags:
        - Profile
      parameters:
        - name: pageSize
          in: query
          description: Tamaño de pagina
          required: false
          schema:
            type: integer
        - name: page
          in: query
          description: Pagina
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: Array of Job Types
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#components/schemas/EmployeeRequest"

  /api/profile/user:
    post:
      summary: Crear nuevo usuario.
      description: Crear nuevo usuario.
      tags:
        - Profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#components/schemas/UserRequest"
      responses:
        "200": # status code
          description: Model user type
          content:
            application/json:
              schema:
                $ref: "#components/schemas/UserRequest"
    get:
      summary: Get all users
      description: Get all users
      tags:
        - Profile
      parameters:
        - name: pageSize
          in: query
          description: Tamaño de pagina
          required: false
          schema:
            type: integer
        - name: page
          in: query
          description: Pagina
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: Array of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#components/schemas/UserRequest"

  /api/profile/login:
    get:
      summary: Log user
      description: Log user
      tags:
        - Profile
      responses:
        "200":
          description: User object with values of employe {jobId, name, email} or empty
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#components/schemas/UserRequest"

  /api/jobType:
    post:
      summary: Create a new job type.
      description: Create a new job type.
      tags:
        - JobType
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#components/schemas/JobTypeRequest"
      responses:
        "200": # status code
          description: Model Job Type
          content:
            application/json:
              schema:
                $ref: "#components/schemas/JobTypeRequest"
    get:
      summary: Get all job types
      description: Get all job types
      tags:
        - JobType
      parameters:
        - name: pageSize
          in: query
          description: Tamaño de pagina
          required: false
          schema:
            type: integer
        - name: page
          in: query
          description: Pagina
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: Array of Job Types
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#components/schemas/JobTypeRequest"

  /api/job:
    post:
      summary: Create a new job
      description: Create a new job
      tags:
        - Job
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#components/schemas/JobRequest"
      responses:
        "200":
          description: Model Job
          content:
            application/json:
              schema:
                $ref: "#components/schemas/JobRequest"
    get:
      summary: Obtener listado de trabajos
      description: Obtiene un listado de trabajos (JobRequest).
      tags:
        - Job
      parameters:
        - name: pageSize
          in: query
          description: Tamaño de pagina
          required: false
          schema:
            type: integer
        - name: page
          in: query
          description: Pagina
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: Lista de trabajos obtenida con éxito.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/JobRequest"
        "404":
          description: No se encontraron trabajos.

  /api/branch:
    get:
      summary: Obtener listado de BranchOfficeRequest
      description: Obtiene un listado de BranchOfficeRequest.
      tags:
        - BranchOfficeRequest
      parameters:
        - name: pageSize
          in: query
          description: Tamaño de pagina
          required: false
          schema:
            type: integer
        - name: page
          in: query
          description: Pagina
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: Lista de BranchOfficeRequest obtenida con éxito.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BranchOfficeRequest"
        "404":
          description: No se encontraron BranchOfficeRequest.
    post:
      summary: Crear una nueva branchoffice
      description: Crea una nueva branchoffice.
      tags:
        - BranchOfficeRequest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BranchOfficeRequest"
      responses:
        "201":
          description: Branchoffice creada con éxito.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BranchOfficeRequest"
        "400":
          description: Solicitud incorrecta.
    put:
      summary: Actualizar una branchoffice existente
      description: Actualiza una branchoffice existente.
      tags:
        - BranchOfficeRequest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BranchOfficeRequest"
      responses:
        "200":
          description: Branchoffice actualizada con éxito.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BranchOfficeRequest"
        "400":
          description: Solicitud incorrecta.
        "404":
          description: Branchoffice no encontrada.

  /api/road:
    get:
      summary: Obtener listado de RouteRequest
      description: Obtiene un listado de RouteRequest.
      tags:
        - Road
      parameters:
        - name: pageSize
          in: query
          description: Tamaño de pagina
          required: false
          schema:
            type: integer
        - name: page
          in: query
          description: Pagina
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: Lista de RouteRequest obtenida con éxito.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RouteRequest"
        "404":
          description: No se encontraron RouteRequest.
    post:
      summary: Crear una nueva route
      description: Crea una nueva route.
      tags:
        - Road
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RouteRequest"
      responses:
        "201":
          description: Route creado con éxito.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RouteRequest"
        "400":
          description: Solicitud incorrecta.

  /api/road/department:
    get:
      summary: Obtener listado de DepartmentRequest
      description: Obtiene un listado de DepartmentRequest.
      tags:
        - Road
      parameters:
        - name: pageSize
          in: query
          description: Tamaño de pagina
          required: false
          schema:
            type: integer
        - name: page
          in: query
          description: Pagina
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: Lista de DepartmentRequest obtenida con éxito.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DepartmentRequest"
        "404":
          description: No se encontraron DepartmentRequest.

  /api/road/city:
    get:
      summary: Obtener listado de CityRequest
      description: Obtiene un listado de CityRequest.
      tags:
        - Road
      parameters:
        - name: pageSize
          in: query
          description: Tamaño de pagina
          required: false
          schema:
            type: integer
        - name: page
          in: query
          description: Pagina
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: Lista de CityRequest obtenida con éxito.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CityRequest"
        "404":
          description: No se encontraron CityRequest.

  /api/package/{order}:
    get:
      summary: Paquete filtrado por numero de orden
      description: Paquete filtrado por numero de orden.
      tags:
        - Package
      parameters:
        - name: order
          in: path
          description: Numero de orden
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Paquete filtrado por numero de orden
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PackageRequest"
        "404":
          description: No se encontraron paquetes

  /api/package:
    get:
      summary: Obtener listado de Paquetes
      description: Obtiene un listado de Paquetes.
      tags:
        - Package
      responses:
        "200":
          description: Lista de paquetes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PackageRequest"
        "404":
          description: No se encontraron paquetes

  /api/order/{id}:
    get:
      summary: Orden filtrada por id
      description: Orden filtrada por id
      tags:
        - Order
      parameters:
        - name: order
          in: path
          description: Numero de orden
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Orden filtrada por id
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/OrderRequest"
        "404":
          description: No se encontraron paquetes

  /api/order:
    get:
      summary: Lista de ordenes
      description: Lista de ordenes
      tags:
        - Order
      responses:
        "200":
          description: Lista de ordenes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderRequest"
        "404":
          description: No se encontraron ordenes
    post:
      summary: Crear un nueva orden tomar en cuenta que se debe mandar un array de package (package request model)
      description: Crea un nueva orden tomar en cuenta que se debe mandar un array de package (package request model)
      tags:
        - Order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderRequest"
      responses:
        "201":
          description: Path creado con éxito.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderRequest"
        "400":
          description: Solicitud incorrecta.

  /api/vehicle:
    get:
      summary: Lista de vehiculos
      description: Lista de vehiculos
      tags:
        - Vehicle
      responses:
        "200":
          description: Lista de vehiculos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/VehicleRequest"
    post:
      summary: Registrar un nuevo vehiculo
      description: Registrar un nuevo vehiculo
      tags:
        - Vehicle
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VehicleRequest"
      responses:
        "201":
          description: Vehiculo creado con éxito.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VehicleRequest"

  /api/vehicle/type:
    get:
      summary: Lista de tipos de vehiculos
      description: Lista de tipos de vehiculos
      tags:
        - Vehicle
      responses:
        "200":
          description: Lista de tipos de vehiculos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/VehicleTypeRequest"
    post:
      summary: Registrar un nuevo tipo de vehiculo
      description: Registrar un nuevo tipo de vehiculo
      tags:
        - Vehicle
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VehicleTypeRequest"
      responses:
        "201":
          description: Vehiculo creado con éxito.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VehicleTypeRequest"

  /api/cost/{branchOffice}:
    get:
      summary: Costos filtrada por Sucursal
      description: costos filtrada por Sucursal
      tags:
        - Cost
      parameters:
        - name: branchOffice
          in: path
          description: Sucursal
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Costo filtrada por sucursal
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CostRequest"
  /api/cost:
    get:
      summary: Lista de costos
      description: Lista de costos
      tags:
        - Cost
      responses:
        "200":
          description: Lista de costos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CostRequest"
    post:
      summary: Registrar un nuevo costo
      description: Registrar un nuevo costo
      tags:
        - Cost
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CostRequest"
      responses:
        "201":
          description: Costo registrado con éxito.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CostRequest"

  /api/cost/type:
    get:
      summary: Lista de tipos de costo
      description: Lista de tipos de costo
      tags:
        - Cost
      responses:
        "200":
          description: Lista de tipos de costo
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CostTypeRequest"
    post:
      summary: Registrar un nuevo tipo de costo
      description: Registrar un nuevo tipo de costo
      tags:
        - Cost
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CostTypeRequest"
      responses:
        "201":
          description: Costo creado con éxito.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CostTypeRequest"

components:
  schemas:
    UserRequest:
      type: object
      properties:
        id:
          type: number
        email:
          type: string
        name:
          type: string
        password:
          type: string
        employee:
          $ref: "#/components/schemas/EmployeeRequest"
    EmployeeRequest:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        job:
          $ref: "#/components/schemas/JobRequest"
        branchOffice:
          $ref: "#/components/schemas/BranchOfficeRequest"
        salary:
          type: number
        isActive:
          type: boolean
    JobTypeRequest:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        description:
          type: string

    JobRequest:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        description:
          type: string
        jobType:
          $ref: "#/components/schemas/JobTypeRequest"
        baseSalary:
          type: number

    OrderStatusRequest:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        description:
          type: string

    OrderRequest:
      type: object
      properties:
        id:
          type: number
        date:
          type: string
          format: date-time
        cost:
          type: number
        total:
          type: number
        email:
          type: string
        client:
          type: string
        address:
          type: string
        phone:
          type: string
        description:
          type: string
        brachOffice:
          $ref: "#/components/schemas/BrachOfficeRequest"
        route:
          $ref: "#/components/schemas/BrachOfficeRequest"
        orderStatus:
          $ref: "#/components/schemas/OrderStatusRequest"

    PackageRequest:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        weight:
          type: number
        cost:
          type: number
        total:
          type: number
        height:
          type: number
        widht:
          type: number
        description:
          type: string
        order:
          $ref: "#/components/schemas/OrderRequest"

    BranchOfficeRequest:
      type: object
      properties:
        id:
          type: number
        address:
          type: string
        isActive:
          type: boolean
        capacity:
          type: number
        city:
          $ref: "#/components/schemas/CityRequest"

    CityRequest:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        department:
          $ref: "#/components/schemas/DepartmentRequest"

    DepartmentRequest:
      type: object
      properties:
        id:
          type: number
        name:
          type: string

    RouteRequest:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        priceWeight:
          type: number
        costWeight:
          type: number
        origin:
          $ref: "#/components/schemas/BranchOfficeRequest"
        destination:
          $ref: "#/components/schemas/BranchOfficeRequest"
        isActive:
          type: boolean
        weight:
          type: number

    VehicleTypeRequest:
      type: object
      properties:
        id:
          type: number
        name:
          type: string

    VehicleRequest:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        description:
          type: string
        priceWeight:
          type: number
        maxWeight:
          type: number
        branchoffice:
          $ref: "#/components/schemas/BranchOfficeRequest"
        vehicleType:
          $ref: "#/components/schemas/VehicleTypeRequest"
    CostTypeRequest:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
    CostRequest:
      type: object
      properties:
        id:
          type: number
        description:
          type: string
        estimatedCost:
          type: number
        finalCost:
          type: number
        costType:
          $ref: "#/components/schemas/CostTypeRequest"
        branchOffice:
          $ref: "#/components/schemas/BranchOfficeRequest"
