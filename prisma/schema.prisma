generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// We could not retrieve columns for the underlying table. Either it has none or you are missing rights to see them. Please check your privileges.
// model newtable {
// }


// ----------------------------Job -------------------------
model User {
    id       Int     @id @default(autoincrement())
    email    String  @unique
    name     String?
    password String

    //Relations
    employee Employee[]
}

model Employee {
    id   Int    @id @default(autoincrement())
    name String

    //Relations
    user           User         @relation(fields: [userId], references: [id])
    userId         Int
    job            Job          @relation(fields: [jobId], references: [id])
    jobId          Int
    branchOffice   BranchOffice @relation(fields: [branchOfficeId], references: [id])
    branchOfficeId Int
    salary         Float
    isActive       Boolean
}

// ----------------------------Job -------------------------

model JobType {
    id          Int    @id @default(autoincrement())
    name        String
    description String

    //Relations
    Job Job[]
}

model Job {
    id          Int    @id @default(autoincrement())
    name        String
    description String

    //Relations
    jobType    JobType    @relation(fields: [jobTypeId], references: [id])
    jobTypeId  Int
    Employee   Employee[]
    baseSalary Float
}

// ----------------------------Package and orders -------------------------
model OrderStatus {
    id          Int     @id @default(autoincrement())
    name        String
    description String
    Order       Order[]
}

model Order {
    id          Int      @id @default(autoincrement())
    date        DateTime
    total       Float
    email       String
    client      String
    address     String
    phone       String
    description String

    //relations
    orderStatus   OrderStatus @relation(fields: [orderStatusId], references: [id])
    orderStatusId Int
    Package       Package[]
}

model Package {
    id      Int    @id @default(autoincrement())
    name    String
    weight  Float
    cost    Float
    total   Float
    hight   Float
    widht   Float
    order   Order  @relation(fields: [orderId], references: [id])
    orderId Int
}

// ----------------------------Road -------------------------

model BranchOffice {
    id       Int        @id @default(autoincrement())
    address  String
    isActive Boolean
    Employee Employee[]

    //relations
    Route1 Route[] @relation("ref_route1")
    Route2 Route[] @relation("ref_route2")
    Path1  Path[]  @relation("ref_route3")
    Path2  Path[]  @relation("ref_route4")
    city   City    @relation(fields: [cityId], references: [id])
    cityId Int
}

model City {
    id           Int            @id @default(autoincrement())
    name         String
    department   Department     @relation(fields: [departmentId], references: [id])
    departmentId Int
    BranchOffice BranchOffice[]
}

model Department {
    id   Int    @id @default(autoincrement())
    name String
    City City[]
}

model Path {
    id      Int    @id @default(autoincrement())
    name    String
    route   Route  @relation(fields: [routeId], references: [id])
    routeId Int

    //relations
    origin        BranchOffice @relation("ref_route3", fields: [originId], references: [id])
    originId      Int
    destination   BranchOffice @relation("ref_route4", fields: [destinationId], references: [id])
    destinationId Int
}

model Route {
    id            Int          @id @default(autoincrement())
    name          String
    priceWeight   Float
    origin        BranchOffice @relation("ref_route1", fields: [originId], references: [id])
    originId      Int
    destination   BranchOffice @relation("ref_route2", fields: [destinationId], references: [id])
    destinationId Int
    isActive      Boolean
    Path          Path[]
}
