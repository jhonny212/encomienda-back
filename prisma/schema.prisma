generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

/// We could not retrieve columns for the underlying table. Either it has none or you are missing rights to see them. Please check your privileges.
// model newtable {
// }

// ----------------------------Job -------------------------
model User {
    id         Int      @id @default(autoincrement())
    email      String   @unique
    name       String?
    password   String
    employee   Employee @relation(fields: [employeeId], references: [id])
    employeeId Int
}

model Employee {
    id   Int    @id @default(autoincrement())
    name String

    //Relations
    job            Job          @relation(fields: [jobId], references: [id])
    jobId          Int
    branchOffice   BranchOffice @relation(fields: [branchOfficeId], references: [id])
    branchOfficeId Int
    salary         Float
    isActive       Boolean
    User           User[]
}

// ----------------------------Job -------------------------

model JobType {
    id          Int     @id @default(autoincrement())
    name        String
    description String
    isActive    Boolean @default(true)

    //Relations
    Job Job[]
}

model Job {
    id          Int    @id @default(autoincrement())
    name        String
    description String

    //Relations
    jobType    JobType    @relation(fields: [jobTypeId], references: [id])
    jobTypeId  Int
    Employee   Employee[]
    baseSalary Float
}

// ----------------------------Package and orders -------------------------
model OrderStatus {
    id          Int     @id @default(autoincrement())
    name        String
    description String
    Order       Order[]
}

model Order {
    id          Int      @id @default(autoincrement())
    date        DateTime @default(now())
    total       Float
    cost        Float
    email       String
    client      String
    address     String
    phone       String
    description String

    //relations
    orderStatus   OrderStatus   @relation(fields: [orderStatusId], references: [id])
    orderStatusId Int
    Package       Package[]
    route         Route?        @relation(fields: [routeId], references: [id])
    routeId       Int?
    brachOffice   BranchOffice? @relation("destiny", fields: [brachOfficeId], references: [id])
    brachOfficeId Int?

    origin   BranchOffice? @relation("origin", fields: [originId], references: [id])
    originId Int?

    Tracking      Tracking[]
    TrackingReal  Log[]
    deliveredDate DateTime   @default(now())
    flag          Boolean    @default(false)
}

model Package {
    id          Int    @id @default(autoincrement())
    name        String
    weight      Float
    cost        Float
    total       Float
    height      Float
    widht       Float
    order       Order  @relation(fields: [orderId], references: [id])
    orderId     Int
    description String
}

// ----------------------------Road -------------------------

model BranchOffice {
    id       Int        @id @default(autoincrement())
    address  String
    isActive Boolean
    Employee Employee[]

    //relations
    Route1 Route[] @relation("ref_route1")
    Route2 Route[] @relation("ref_route2")
    //Path1    Path[]    @relation("ref_route3")
    //Path2    Path[]    @relation("ref_route4")
    city   City    @relation(fields: [cityId], references: [id])
    cityId Int

    capacity Int
    Vehicle  Vehicle[]
    Cost     Cost[]
    Order1   Order[]   @relation("origin")
    Order2   Order[]   @relation("destiny")
    goal     Int       @default(5)
}

model CostType {
    id       Int     @id @default(autoincrement())
    name     String
    Cost     Cost[]
    isActive Boolean @default(true)
}

model Cost {
    id             Int          @id @default(autoincrement())
    costTypeId     Int
    costType       CostType     @relation(fields: [costTypeId], references: [id])
    description    String
    estimatedCost  Float
    finalCost      Float
    branchOfficeId Int
    branchOffice   BranchOffice @relation(fields: [branchOfficeId], references: [id])
    date           DateTime     @default(now())
}

model City {
    id           Int            @id @default(autoincrement())
    name         String
    department   Department     @relation(fields: [departmentId], references: [id])
    departmentId Int
    BranchOffice BranchOffice[]
    isActive     Boolean        @default(true)
}

model Department {
    id       Int     @id @default(autoincrement())
    name     String
    isActive Boolean @default(true)
    City     City[]
}

model Tracking {
    id Int @id @default(autoincrement())

    //relations
    route       Route   @relation(fields: [routeId], references: [id])
    routeId     Int
    order       Order   @relation(fields: [orderId], references: [id])
    orderId     Int
    cost        Float
    price       Float
    vehicleCost Float
    passed      Boolean @default(false)
}

model Log {
    id   Int      @id @default(autoincrement())
    date DateTime @default(now())

    //relations
    route       Route   @relation(fields: [routeId], references: [id])
    routeId     Int
    order       Order   @relation(fields: [orderId], references: [id])
    orderId     Int
    cost        Float
    total       Float
    passed      Boolean @default(false)
    vehicle     Vehicle @relation(fields: [vehicleId], references: [id])
    vehicleId   Int
    vehicleCost Float
}

model Route {
    id            Int          @id @default(autoincrement())
    name          String
    priceWeight   Float
    costWeight    Float
    origin        BranchOffice @relation("ref_route1", fields: [originId], references: [id])
    originId      Int
    destination   BranchOffice @relation("ref_route2", fields: [destinationId], references: [id])
    destinationId Int
    isActive      Boolean
    // Path          Path[]
    Order         Order[]
    weight        Int
    //Tracking      Tracking[]
    Log           Log[]
    Tracking      Tracking[]
}

//-------------------------vehicle---------------
model VehicleType {
    id       Int       @id @default(autoincrement())
    name     String
    vehicle  Vehicle[]
    isActive Boolean   @default(true)
}

model Vehicle {
    id             Int     @id @default(autoincrement())
    vehicleTypeId  Int
    name           String
    description    String
    branchOfficeId Int
    priceWeight    Float
    maxWeight      Float
    isActive       Boolean @default(true)

    // FK
    vehicleType  VehicleType  @relation(fields: [vehicleTypeId], references: [id])
    branchOffice BranchOffice @relation(fields: [branchOfficeId], references: [id])
    //Tracking     Tracking[]
    Log          Log[]
    //Tracking     Tracking[]
}
